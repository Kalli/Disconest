// Generated by CoffeeScript 1.8.0
var ValidateDiscogsUrl, getMetaData, getParams, urlparams;

$(document).ready(function() {
  var discogsparams, releaseModel, releaseView, search, searchCollection, searchCollectionView, url;
  releaseModel = new ReleaseModel();
  releaseView = new ReleaseView({
    model: releaseModel,
    el: $('body')
  });
  searchCollection = new SearchCollection({});
  searchCollectionView = new SearchCollectionView({
    collection: searchCollection,
    el: $('body')
  });
  if (urlparams.discogsurl) {
    url = unescape(urlparams.discogsurl);
    discogsparams = ValidateDiscogsUrl(url);
    if (discogsparams.valid) {
      $('#searchbox').val(url);
      getMetaData(discogsparams);
    }
  }
  $('#searchbox').keypress((function(_this) {
    return function(e) {
      if (e.which === 13) {
        return search();
      } else {
        return $('#results').hide(1000);
      }
    };
  })(this));
  $('#searchbutton').click((function(_this) {
    return function() {
      return search();
    };
  })(this));
  return search = function() {
    var query;
    query = $('#searchbox').val();
    discogsparams = ValidateDiscogsUrl(query);
    if (discogsparams.valid) {
      return getMetaData(discogsparams);
    } else {
      $('#results').html("");
      $(".loading").show();
      searchCollectionView.undelegateEvents();
      searchCollection = new SearchCollection({
        "query": query
      });
      return searchCollection.fetch({
        success: function() {
          $(".loading").hide();
          searchCollectionView = new SearchCollectionView({
            collection: searchCollection,
            el: $('#results')
          });
          return searchCollectionView.render();
        }
      });
    }
  };
});

getParams = function() {
  var key, params, query, raw_vars, v, val, _i, _len, _ref;
  query = window.location.search.substring(1);
  raw_vars = query.split("&");
  params = {};
  for (_i = 0, _len = raw_vars.length; _i < _len; _i++) {
    v = raw_vars[_i];
    _ref = v.split("="), key = _ref[0], val = _ref[1];
    params[key] = decodeURIComponent(val);
  }
  return params;
};

urlparams = getParams();

ValidateDiscogsUrl = function(url) {
  var discogsparams, matches, regexp;
  discogsparams = {};
  regexp = /(?:https?:\/\/)?(?:www.)?discogs.com\/.*?\/?(release|master)s?\/(?:view\/)?(\d+)/;
  matches = url.match(regexp);
  if (matches && matches.length === 3) {
    discogsparams.valid = true;
    discogsparams.type = matches[1] + "s";
    discogsparams.id = matches[2];
  } else {
    discogsparams.valid = false;
  }
  return discogsparams;
};

getMetaData = function(discogsparams) {
  var releaseModel, releaseparameters;
  $(".loading").show();
  releaseparameters = {
    type: discogsparams.type,
    id: discogsparams.id,
    lastfm_apikey: "608dd6c15b85a6abcd794f1b01c0438e"
  };
  if (urlparams.token) {
    releaseparameters.lastfmtoken = urlparams.token;
  }
  releaseModel = new ReleaseModel(releaseparameters);
  return releaseModel.fetch({
    success: function() {
      var discogsurl, html, index, releaseView, title, track, _i, _len, _ref, _results;
      title = "Disconest - Musical metadata for " + releaseModel.attributes.title;
      discogsurl = "https://www.discogs.com/" + releaseModel.attributes.type.slice(0, -1) + "/" + releaseModel.id;
      window.history.pushState(null, title, location.protocol + "//" + location.host + "/?discogsurl=" + discogsurl);
      document.title = title;
      releaseView = new ReleaseView({
        model: releaseModel,
        el: $('body')
      });
      releaseView.render();
      $(".loading").hide();
      $('#release').show();
      _ref = releaseModel.attributes.tracklist;
      _results = [];
      for (index = _i = 0, _len = _ref.length; _i < _len; index = ++_i) {
        track = _ref[index];
        if (track.artists[0].id !== 194) {
          _results.push((function() {
            var songModel;
            if (track.artists.length > 1) {
              songModel = new SongModel({
                artists: track.artists,
                index: index,
                title: track.title
              });
            } else {
              songModel = new SongModel({
                id: track.artists[0].id,
                index: index,
                title: track.title
              });
            }
            return songModel.fetch({
              success: function() {
                var songView;
                songView = new SongView({
                  model: songModel
                });
                return songView.render();
              }
            });
          })());
        } else {
          html = '<td></td><td></td><td></td>';
          _results.push($('#tltable tbody tr').eq(index).append(html));
        }
      }
      return _results;
    }
  });
};
