// Generated by CoffeeScript 1.7.1
$(document).ready(function() {
  var ValidateDiscogsUrl, discogsparams, getMetaData, kv, param, params, renderError, _i, _len, _results;
  ValidateDiscogsUrl = function(url) {
    var discogsparams, matches, regexp;
    discogsparams = {};
    regexp = /(?:https?:\/\/)?(?:www.)?discogs.com\/.*?\/?(release|master)\/(\d+)/;
    matches = url.match(regexp);
    if (matches && matches.length === 3) {
      discogsparams.valid = true;
      discogsparams.type = matches[1] + "s";
      discogsparams.id = matches[2];
    } else {
      discogsparams.valid = false;
    }
    return discogsparams;
  };
  $('#discogsurl').keypress((function(_this) {
    return function(e) {
      if (e.which === 13) {
        return getMetaData();
      }
    };
  })(this));
  $('#getmetadata').click((function(_this) {
    return function() {
      return getMetaData();
    };
  })(this));
  getMetaData = function() {
    var discogsparams, matches, regexp, releaseModel, url;
    url = $('#discogsurl').val();
    regexp = /(?:https?:\/\/)?(?:www.)?discogs.com\/.*?\/(release|master)\/(\d+)/;
    matches = url.match(regexp);
    discogsparams = ValidateDiscogsUrl(url);
    if (discogsparams.valid) {
      releaseModel = new ReleaseModel({
        type: discogsparams.type,
        id: discogsparams.id
      });
      return releaseModel.fetch({
        success: function() {
          var html, index, releaseView, track, _i, _len, _ref, _results;
          releaseView = new ReleaseView({
            model: releaseModel
          });
          releaseView.render();
          _ref = releaseModel.attributes.tracklist;
          _results = [];
          for (index = _i = 0, _len = _ref.length; _i < _len; index = ++_i) {
            track = _ref[index];
            if (!track.artists) {
              track.artists = releaseModel.attributes.artists;
            }
            if (track.artists[0].id !== 194) {
              _results.push((function() {
                var songModel;
                songModel = new SongModel({
                  id: track.artists[0].id,
                  index: index,
                  title: track.title
                });
                return songModel.fetch({
                  success: function() {
                    var songView;
                    songView = new SongView({
                      model: songModel
                    });
                    return songView.render();
                  }
                });
              })());
            } else {
              html = '<td></td><td></td><td></td>';
              _results.push($('#tltable tbody tr').eq(index).append(html));
            }
          }
          return _results;
        }
      });
    } else {
      return renderError(url);
    }
  };
  renderError = function(url) {
    $("#error").show();
    return $('.alert .close').click(function(e) {
      return $(this).parent().hide();
    });
  };
  params = document.URL.split("?");
  if (params.length > 1) {
    params = params[1].split("&");
    _results = [];
    for (_i = 0, _len = params.length; _i < _len; _i++) {
      param = params[_i];
      kv = param.split("=");
      if (kv.length === 2 && kv[0] === "discogsurl") {
        discogsparams = ValidateDiscogsUrl(kv[1]);
        if (discogsparams.valid) {
          $('#discogsurl').val(kv[1]);
          _results.push(getMetaData());
        } else {
          _results.push(void 0);
        }
      } else {
        _results.push(void 0);
      }
    }
    return _results;
  }
});
