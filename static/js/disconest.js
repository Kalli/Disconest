// Generated by CoffeeScript 1.6.3
(function() {
  $(document).ready(function() {
    var Disconest;
    return Disconest = (function() {
      function Disconest(discogsid, discogstype) {
        this.discogsid = discogsid;
        this.discogstype = discogstype;
        this.getDiscogsInformation(this.discogsid, this.discogstype);
        this.tldomelement = "#tltable";
      }

      Disconest.prototype.getDiscogsInformation = function(id, type) {
        var url,
          _this = this;
        url = "/discogs?url=http://api.discogs.com/" + type + "/" + id;
        return $.ajax({
          dataType: "json",
          url: url,
          data: [],
          success: function(response) {
            return _this.discogsCallback(response);
          }
        });
      };

      Disconest.prototype.discogsCallback = function(response) {
        this.discogsinfo = response;
        this.renderDiscogsInformation(response);
        return this.getTracklist();
      };

      Disconest.prototype.renderDiscogsInformation = function() {
        var html, source, template;
        source = $("#release-template").html();
        template = Handlebars.compile(source);
        html = template(this.discogsinfo);
        $("#release").html(html);
        return this.addVideoLinks();
      };

      Disconest.prototype.addVideoLinks = function() {
        var index, link, track, video, _i, _len, _ref, _results;
        if (this.discogsinfo.videos) {
          _ref = this.discogsinfo.videos;
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            video = _ref[_i];
            _results.push((function() {
              var _j, _len1, _ref1, _results1;
              _ref1 = this.discogsinfo.tracklist;
              _results1 = [];
              for (index = _j = 0, _len1 = _ref1.length; _j < _len1; index = ++_j) {
                track = _ref1[index];
                if (video.description.toLowerCase().indexOf(track.title.toLowerCase()) !== -1) {
                  link = $('<a>').attr('href', video.uri).attr('target', '_blank').addClass("yt").text("Youtube");
                  _results1.push($(this.tldomelement + ' tbody').find('tr').eq(index).find('.link').append(link));
                } else {
                  _results1.push(void 0);
                }
              }
              return _results1;
            }).call(this));
          }
          return _results;
        }
      };

      Disconest.prototype.getTracklist = function(tltable) {
        var _this = this;
        return $(this.tldomelement + ' tbody').find('tr').each(function(index, element) {
          return _this.getEchonestInformation(index, $(element).data());
        });
      };

      Disconest.prototype.getEchonestInformation = function(index, data) {
        var buckets, url,
          _this = this;
        url = 'http://developer.echonest.com/api/v4/song/search?api_key=BB7QVYHAMYUOT4ESL&format=json&results=1&artist_id=discogs:artist:' + data.artistid + '&title=' + data.title;
        buckets = '&bucket=audio_summary&bucket=tracks&bucket=id:deezer&bucket=id:spotify-WW';
        url += buckets;
        return $.ajax({
          dataType: "json",
          url: url,
          data: [],
          success: function(response) {
            return _this.echonestCallback(index, response.response);
          }
        });
      };

      Disconest.prototype.echonestCallback = function(index, response) {
        var audio_summary, html, minutes, seconds;
        this.discogsinfo.tracklist[index].echonestinfo = response.songs[0];
        if (response.songs.length > 0) {
          audio_summary = response.songs[0].audio_summary;
          if (audio_summary) {
            minutes = Math.floor(audio_summary.duration / 60);
            seconds = Math.floor(audio_summary.duration % 60);
            $('#tltable tbody tr').eq(index).find(".duration").text(String(minutes) + ":" + String(seconds));
            html = "";
            html += '<td>' + audio_summary.key + '</td>';
            html += '<td>' + audio_summary.time_signature + '</td>';
            html += '<td>' + audio_summary.tempo + '</td>';
            $('#tltable tbody tr').eq(index).append(html);
          }
          return this.addStreamingLinks(index);
        }
      };

      Disconest.prototype.addStreamingLinks = function(index) {
        var de, link, sp, track, url, _i, _len, _ref, _results;
        sp = false;
        de = false;
        _ref = this.discogsinfo.tracklist[index].echonestinfo.tracks;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          track = _ref[_i];
          if (track.catalog === "spotify-WW" && !sp) {
            url = "http://open.spotify.com/track/" + track.foreign_id.split("spotify-WW:track:")[1];
            link = $('<a>').attr('href', url).attr('target', '_blank').addClass("sp").text("Spotify");
            sp = true;
            $(this.tldomelement + ' tbody').find('tr').eq(index).find('.link').append(link);
          }
          if (track.catalog === "deezer" && !de) {
            url = "http://www.deezer.com/track/" + track.foreign_id.split("deezer:track:")[1];
            link = $('<a>').attr('href', url).attr('target', '_blank').addClass("de").text("Deezer");
            de = true;
            _results.push($(this.tldomelement + ' tbody').find('tr').eq(index).find('.link').append(link));
          } else {
            _results.push(void 0);
          }
        }
        return _results;
      };

      Handlebars.registerHelper('tracklist', function(tracks, artists, videos, options) {
        var artist, h, header, out, track, trackartist, trackartistid, _i, _j, _k, _l, _len, _len1, _len2, _len3, _ref, _ref1;
        out = "<h3>Tracklist</h3>";
        out += '<table id="tltable" class="table">';
        header = '<thead>';
        _ref = ['Position', 'Duration', 'Artist', 'Title', 'Links', 'Key', 'Time signature', 'BPM'];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          h = _ref[_i];
          header += '<td>' + h + '</td>';
        }
        out += header + '</thead>';
        for (_j = 0, _len1 = tracks.length; _j < _len1; _j++) {
          track = tracks[_j];
          trackartist = '';
          trackartistid = '';
          if (track.artists) {
            _ref1 = track.artists;
            for (_k = 0, _len2 = _ref1.length; _k < _len2; _k++) {
              artist = _ref1[_k];
              trackartist = artist.name + artist.join;
              trackartistid = artist.id;
            }
          } else {
            for (_l = 0, _len3 = artists.length; _l < _len3; _l++) {
              artist = artists[_l];
              trackartist = artist.name + artist.join;
              trackartistid = artist.id;
            }
          }
          out += '<tr data-artistid="' + trackartistid + '" data-title="' + track.title + '">';
          out += '<td>' + track.position + '</td>';
          out += '<td class="duration">' + track.duration + '</td>';
          out += '<td >' + trackartist + '</td>';
          out += '<td >' + track.title + '</td>';
          out += '<td class="link"></td>';
          out += '</tr>';
        }
        out += '</table>';
        return out;
      });

      $('#getmetadata').click(function() {
        var disconest, matches, regexp, url;
        url = $('#discogsurl').val();
        regexp = /(?:https?:\/\/)?(?:www.)?discogs.com\/.*?\/(release|master)\/(\d+)/;
        matches = url.match(regexp);
        if (matches && matches.length === 3) {
          return disconest = new Disconest(matches[2], matches[1] + "s");
        } else {
          return renderError(url);
        }
      });

      Disconest.prototype.renderError = function(url) {
        var html, source, template;
        source = $("#error-template").html();
        template = Handlebars.compile(source);
        html = template({
          "url": url,
          "error": " is not a valid Discogs release url!"
        });
        return $("#error").html(html);
      };

      return Disconest;

    })();
  });

}).call(this);
