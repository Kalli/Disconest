{
  "name": "lastfm",
  "description": "Read and write to Last.fm",
  "version": "0.9.0",
  "author": {
    "name": "James Scott",
    "email": "jammus@gmail.com"
  },
  "contributors": [
    {
      "name": "Garrett Wilkin",
      "email": "garrett.wilkin@gmail.com",
      "url": "http://geethink.com"
    },
    {
      "name": "Uwe L. Korn",
      "email": "uwelk@xhochy.com",
      "url": "http://xhochy.com/"
    },
    {
      "name": "Max Kueng",
      "url": "http://maxkueng.com/"
    }
  ],
  "repository": {
    "type": "git",
    "url": "http://github.com/jammus/lastfm-node.git"
  },
  "engine": [
    "node >= 0.4.10"
  ],
  "directories": {
    "lib": "./lib/lastfm"
  },
  "dependencies": {
    "underscore": ""
  },
  "devDependencies": {
    "gently": ""
  },
  "main": "./lib/lastfm/index",
  "engines": {
    "node": "*"
  },
  "readme": "# lastfm-node\n\nRead and write to users recent plays on Last.fm.\n\n## Installation\n\n    npm install lastfm\n\n## Usage\n\n    var LastFmNode = require('lastfm').LastFmNode;\n  \n    var lastfm = new LastFmNode({\n      api_key: 'apikey',    // sign-up for a key at http://www.last.fm/api\n      secret: 'secret',\n      useragent: 'appname/vX.X MyApp' // optional. defaults to lastfm-node.\n    });\n\n## Documentation\n\n### LastFmRequest\n\n    lastfm.request(method, options);\n\nReturns a `LastFmRequest` instance.\n\nSend request to Last.fm. Requests automatically include the API key and are signed and/or sent via POST as described in the Last.fm API documentation.\n\nMethods:\n\nAccepts any Last.fm API method name, eg \"artist.getInfo\". \n\nOptions:\n\nAll options are passed through to Last.fm with the exception of the following.\n\n- *write*\n\n        Force request to act as a write method. Write methods are signed and sent via POST. Useful for new methods not yet recognised by lastfm-node.\n\n- *signed*\n\n        Force request to be signed. See Last.fm API docs for signature details. Useful for new methods not yet recognised by lastfm-node.\n\n- *handlers*\n\n        Default event handlers to attach to the request object on creation.\n\nEvents:\n\n- *success(json)*\n\n        JSON response from Last.fm\n\n- *error(error)*\n\n        Ruh-roh. Either a error returned by Last.fm or a transmission error.\n\n### RecentTracksStream\n\n    lastfm.stream(username);\n\nReturns: a `RecentTracksStream` instance\n\nMethods:\n\n- *start()*\n\n        Start streaming recent track info.\n\n- *stop()*\n\n        Stop streaming recent track info.\n\n- *isStreaming()*\n\n        Boolean. True is nowplaying/recent track data is being actively fetched.\n\n- *on(event, listener)*\n\n        Adds a listener for the specified event.\n\n- *removeListener(event, listener)*\n\n        Removes the listener for the specified event.\n\nOptions:\n\n- *autostart*\n\n        Start streaming automatically. Defaults to false.\n\n- *handlers*\n\n        Default event handlers to attach to the request object on creation.\n\nEvents:\n\n- *lastPlayed(track)*\n\n        The user's last scrobbled track.\n\n- *nowPlaying(track)*\n\n        Track the user is currently listening to.\n\n- *scrobbled(track)*\n        \n        Now playing track has been scrobbled.\n\n- *stoppedPlaying(track)*\n\n        User stopped listening to current track.\n\n- *error(error)*\n\n        Ruh-roh.\n\n### LastFmSession\n\n    lastfm.session(options);\n\nReturns: a `LastFmSession` instance.\n\nIf the user and session key are already known supply these in the options. Otherwise supply a token for authorisation. When a token is supplied the session will be authorised with Last.fm. If the user has not yet approved the token (desktop application flow) then authorisation will be automatically retried.\n\nSee the last.fm API documentation for more info on Last.fm authorisation flow.\n\nOptions:\n\n- *user*\n\n        User name, if known.\n\n- *key*\n\n        Session key, if known.\n\n- *token*\n\n        Token supplied by auth.getToken or web flow callback.\n\n- *retryInterval*\n\n        Time in milliseconds to leave between retries. Defaults to 10 seconds.\n\n- *handlers*\n\n        Default event handlers to attach to the session object on creation.\n\n\nPublic properties:\n\n- *user*\n\n        The username of the Last.fm user associated with the session.\n\n- *key*\n\n        The session key. Either passed in or generated using authorise().\n\nMethods:\n\n- *authorise(token, [options])*\n\n        Deprecated. Use lastfm.session({ token: token }) instead.\n        Authorises user with Last.fm api. See last.fm documentation. Options argument has handlers property that has default event handlers to attach to the LastFmSession instance.\n\n- *on(event, handler)*\n\n        Adds a listener for the specified event.\n\n- *removeListener(event, handler)*\n\n        Removes the listener for the specified event.\n\n- *isAuthorised()*\n\n        Returns true if the session has been authorised or a key was specified in the constructor.\n\n- *cancel()*\n\n        Prevent any further authorisation retries. Only applies if token supplied.\n\nEvents:\n\n- *success(session)*\n\n        Authorisation of session was successful.\n        Note: Only emitted if a token was supplied in options. Username/key combinations supplied in options are assumed to be valid.\n\n- *authorised(session)*\n\n        Deprecated: Use success instead.\n        Authorisation of session was successful.\n\n- *retrying(retry)*\n\n       Authorisation request was not successful but will be retried after a delay. Retry object contains the following properties:  \n       `delay` - The time in milliseconds before the request will be retried.  \n       `error` - The error code returned by the Last.fm API.  \n       `message` - The error message returned by the Last.fm API.\n\n- *error(track, error)*\n\n        The authorisation was not successful and will not be retried.\n\n### LastFmUpdate\n\n    lastfm.update(method, session, options);\n\nReturns a `LastFmUpdate` instance. \n\nValid methods are 'nowplaying' and 'scrobble'.\n\nAn authorised `LastFmSession` instance is required to make a successful update.\n\nIf a scrobble request receives an 11 (service offline), 16 (temporarily unavailable) or 29 (rate limit exceeded) error code from Last.fm then the request is automatically retried until it is permanently rejected or accepted. The first retry attempt is made after 10 seconds with subsequent requests delayed by 30 seconds, 1 minute, 5 minutes, 15 minutes and then every 30 minutes.\n\nOptions:\n\nAccepts all parameters used by track.updateNowPlaying and user.scrobble (see Last.Fm API) as well as:\n\n- *track*\n    \n        Track for nowplaying and scrobble requests. Uses same format as returned by `RecentTracksStream` events.\n\n- *timestamp*\n\n        Required for scrobble requests. Timestamp is in unix time (seconds since 01-01-1970 and is in UTC time).\n\n- *handlers*\n\n        Default event handlers to attach to the request object on creation.\n\nEvents:\n\n- *success(track)*\n\n       Update request was successful. \n\n- *retrying(retry)*\n\n       Scrobble request was not successful but will be retried after a delay. Retry object contains the following properties:  \n       `delay` - The time in milliseconds before the request will be retried.  \n       `error` - The error code returned by the Last.fm API.  \n       `message` - The error message returned by the Last.fm API.\n\n- *error(track, error)*\n\n        Ruh-roh.\n\n### LastFmInfo\n\n    lastfm.info(itemtype, [options]);\n\nReturns: a `LastFmInfo` instance.\n\nGets extended info about specified item.\n\nPublic properties:\n\n- *itemtype*\n\n        Any Last.fm item with a getInfo method. eg user, track, artist, etc.\n\nOptions:\n\n- *handlers*\n\n        Event handlers to attach to object at creation.\n\n- *various*\n\n       Params as specified in Last.fm API, eg user: \"username\"\n\nSpecial cases:\n\nWhen requesting track info the `track` param can be either the track name or a track object as returned by `RecentTracksStream`.\n\n\n## Example\n\n    var LastFmNode = require('lastfm').LastFmNode;\n    \n    var lastfm = new LastFmNode({\n      api_key: 'abc',\n      secret: 'secret'\n    });\n\n    var trackStream = lastfm.stream('username');\n    \n    trackStream.on('lastPlayed', function(track) {\n      console.log('Last played: ' + track.name);\n    });\n    \n    trackStream.on('nowPlaying', function(track) {\n      console.log('Now playing: ' + track.name);\n    });\n\n    trackStream.on('scrobbled', function(track) {\n      console.log('Scrobbled: ' + track.name);\n    });\n\n    trackStream.on('stoppedPlaying', function(track) {\n      console.log('Stopped playing: ' + track.name);\n    });\n\n    trackStream.on('error', function(error) {\n      console.log('Error: '  + error.message);\n    });\n\n    trackStream.start();\n\n    var session = lastfm.session({\n       token: token,\n       handlers: {\n          success: function(session) {\n             lastfm.update('nowplaying', session, { track: track } );\n             lastfm.update('scrobble', session, { track: track, timestamp: 12345678 });\n          }\n       }\n    });\n\n    var request = lastfm.request(\"artist.getInfo\", {\n        artist: \"The Mae Shi\",\n        handlers: {\n            success: function(data) {\n                console.log(\"Success: \" + data);\n            },\n            error: function(error) {\n                console.log(\"Error: \" + error.message);\n            }\n        }\n    });\n\n## Influences\n\nHeavily drawn from technoweenie's twitter-node  \nhttp://github.com/technoweenie/twitter-node\n\n## Contributors\n\n* Garret Wilkin (garrettwilkin) - http://geethink.com\n* Uwe L. Korn (xhochy) - http://xhochy.com\n* Max Kueng (maxkueng) - http://maxkueng.com\n",
  "readmeFilename": "README.md",
  "_id": "lastfm@0.9.0",
  "dist": {
    "shasum": "ed4ef123b532feb2298d4162e00221342b19b8e8"
  },
  "_from": "lastfm"
}
